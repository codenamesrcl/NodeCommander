{
  "version": 3,
  "file": "manager.min.js",
  "sources": [
    "../ServerManager/app/manager/manager.js",
    "../ServerManager/app/manager/shell.js",
    "../ServerManager/app/manager/components/childProcess/childProcess.js",
    "../ServerManager/app/manager/features/angularTab/angularTab.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACh
  "sourcesContent": [
    "(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     *\r\n     * @ngdoc module\r\n     * @module  manager\r\n     * @name  manager\r\n     * \r\n     * \r\n     * @description\r\n     * A generic angular module\r\n     */\r\n    var app = angular.module('manager', [\r\n        // Angular modules \r\n        'ngAnimate',\r\n        //'ngRoute'\r\n        //'ngSanitize',\r\n        // Custom modules \r\n        \"gen\",       \r\n        \"nodetools\", \r\n        \"appConfig\",\r\n        'ui.bootstrap'\r\n        // 3rd Party Modules\r\n    ]);\r\n\r\n    app.constant('appContext', {\r\n        \r\n    });\r\n\r\n    app.run(onRun);\r\n\r\n    //onRun.$inject = [];\r\n\r\n    function onRun() {\r\n\r\n    }\r\n\r\n})();\r\n",
    "(function(){\r\n\t'use strict'\r\n\r\n\tangular\r\n\t\t.module('manager')\r\n\t\t.controller('shell', Shell);\r\n\r\n\tShell.$inject = [];\r\n\r\n\tfunction Shell(){\r\n\t\tvar vm = this;\r\n\t\t\t\r\n\t\t\r\n\r\n\t}\r\n\r\n}());",
    "(function(){\r\n\t'use strict'\r\n\r\n\tangular\r\n\t\t.module('manager')\r\n\t\t.directive('childProcess', directive);\r\n\r\n\tdirective.$inject = ['lodash'];\r\n\r\n\tfunction directive(_){\r\n\t\tvar directive = {\r\n\t        restrict: 'EA',\r\n\t        templateUrl: '/app/manager/components/childProcess/childProcess.html',\r\n\t        scope: {\r\n\t        \tdirectivename: '@',\r\n\t        \tparentdirective: '@',\r\n\t        \tprocessname: \"@\",\r\n\t        \toutputlimit: '@',\r\n\t        \tcommand: \"@\",\r\n\t        \tcommandConfig: \"@\"\r\n\t        },\r\n\t        link: link,\r\n\t        controller: Controller,\r\n\t        controllerAs: 'vm',\r\n\t        bindToController: true\r\n\t    };\r\n\r\n\t    return directive;\r\n\r\n\t    function link(scope, el, attr) {\r\n\t    \t//console.log(scope.vm.commandConfig);\r\n\t    }\r\n\r\n\t}\r\n\r\n\tController.$inject = ['lodash', 'execFactory', '$scope']\r\n\r\n\tfunction Controller(_, execFactory, $scope) {\r\n\t    var vm = this;\r\n\t    vm.stdout = [];\r\n\r\n\t   \tvm.started = false;\r\n\t    vm.visible = false;\r\n\r\n\t    /**\r\n\t     * vm.outputlimit\r\n\t     * vm.command\r\n\t     */\r\n\t    var eventHandler = function(eventtype, data){\r\n\t    \tswitch(eventtype){\r\n\t    \t\tcase \"stdout.data\":\r\n\t    \t\t\t_appendStdOut(data);\r\n\t    \t\t\tbreak;\r\n\t    \t\tcase \"close\":\r\n\t    \t\t\tvm.status = \"idle\";\t\r\n\t    \t\t\t_execRunner.kill();\r\n\t    \t\t\tvm.started = false;\r\n\t    \t\t\t_appendStdOut(\"process closed with code \" + data);\r\n\t    \t\t\tbreak;\r\n\t    \t\tcase 'exit':\r\n\t    \t\t\tvm.status = \"idle\";\t\r\n\t    \t\t\t_execRunner.kill();\r\n\t    \t\t\tvm.started = false;\r\n\t    \t\t\t_appendStdOut(\"process exited with code \" + data);\r\n\t    \t\t\tbreak;\r\n\t    \t}\r\n\t    \t$scope.$digest();\r\n\t    }\r\n\t    function _appendStdOut(data){\r\n\t    \tdata = _.filter(data.split('\\n'), function(item, index){\r\n\t    \t\tif(item.trim().length > 0){\r\n\t    \t\t\treturn item;\r\n\t    \t\t}\r\n\t    \t});\r\n\t    \t_.forEach(data, function(item, index){\r\n\t    \t\tvm.stdout.push({\r\n\t\t\t\t\tid: -1,\r\n\t\t\t\t\tdata: item\r\n\t\t\t\t});\t\r\n\t    \t});\r\n\t    \t\r\n\t\t\tvm.stdout = _.map(_.takeRight(vm.stdout, vm.outputlimit), function(item, index){\r\n\t\t\t\titem.id = index;\r\n\t\t\t\treturn item;\r\n\t\t\t})\r\n\t    }\r\n\r\n\t    var _execRunner = execFactory.newRunner(vm.command, JSON.parse(vm.commandConfig), eventHandler);\r\n\r\n\r\n\t    vm.toggleVisiblity = function(){\r\n\t    \tvm.visible = !vm.visible;\r\n\t    }\r\n\r\n\t    vm.toggleStart = function(){\r\n\t    \tif(vm.started){\t\r\n\t    \t\t_execRunner.kill();\r\n\t    \t}\r\n\t    \telse{\r\n\t    \t\t_execRunner.run();\r\n\t    \t}\r\n\t    \tvm.started = !vm.started;\r\n\t    }\r\n\t    vm.btnStartText = function(){\r\n\t    \treturn vm.started ? 'Stop' : 'Start';\r\n\t    }\r\n\t    vm.txtStatus = function(){\r\n\t    \treturn vm.started ? 'Running' : 'Idle';\r\n\t    }\r\n\r\n\r\n\r\n\t    init();\r\n\t    function init(){\r\n\t    \tvm.processname = vm.processname || \"Process\";\r\n\t    \tvm.outputlimit = _.parseInt(vm.outputlimit || '100');\r\n\t    \t_execRunner.setCommand(vm.command, false);\r\n\t    }\r\n\r\n\t}\r\n\r\n}());\r\n",
    "(function(){\r\n\t'use strict'\r\n\r\n\tangular\r\n\t\t.module('manager')\r\n\t\t.controller('angularTab', controller);\r\n\r\n\tcontroller.$inject = ['lodash', 'appConfig.serverConfig'];\r\n\r\n\tfunction controller(_, serverConfig){\r\n\t\tvar vm = this;\r\n\t\t\r\n\t\tvm.childProcessList = [];\r\n\r\n\t\tfunction ChildProcessDef(config){\r\n\t\t\tif(!config.path){\r\n\t\t\t\tthrow 'path required';\r\n\t\t\t}\r\n\t\t\tif(!config.mainTarget){\r\n\t\t\t\tthrow 'main target required';\r\n\t\t\t}\r\n\r\n\t\t\tthis.name = config.name || '';\r\n\t\t\tthis.path = config.path || '';\r\n\t\t\tthis.mainTarget = config.mainTarget || '';\r\n\t\t\tthis.expectedPort = config.expectedPort || '';\r\n\t\t\tthis.commandConfig = config.commandConfig || {};\r\n\t\t\t\r\n\t\t\tthis.explicitCommand = config.explicitCommand || null;\r\n\r\n\t\t\tthis.displayName = this.name;\r\n\t\t\tif(config.expectedPort){\r\n\t\t\t\tthis.displayName += ': ' + config.expectedPort;\r\n\t\t\t}\r\n\t\t}\r\n\t\tChildProcessDef.prototype.makeFunc = function(){\r\n\t\t\t//construct the function to run based on the instance values\r\n\t\t\tconsole.log(this.explicitCommand);\r\n\t\t\tif(!this.explicitCommand){\r\n\t\t\t\tvar command = \"node \" + this.mainTarget;\r\n\r\n\t\t\t\treturn command;\r\n\t\t\t}\r\n\r\n\t\t\treturn this.explicitCommand;\r\n\t\t};\r\n\r\n\t\tfunction init(){\r\n\t\t\tvar configkeys = _.keys(serverConfig.config);\r\n\r\n\t\t\t//based on the keys, generate the list of elements\r\n\t\t\tvm.childProcessList = _.map(configkeys, function(key){\r\n\t\t\t\tvar setconfig = serverConfig.config[key];\r\n\r\n\t\t\t\t//ChildProcessDef({config})\r\n\t\t\t\tvar item = new ChildProcessDef({\r\n\t\t\t\t\tname: key,\r\n\t\t\t\t\tpath: setconfig.path,\r\n\t\t\t\t\tmainTarget: setconfig.main,\r\n\t\t\t\t\texpectedPort: setconfig.port,\r\n\t\t\t\t\texplicitCommand: setconfig.explicitCommand,\r\n\t\t\t\t\tcommandConfig: {\r\n\t\t\t\t\t\tcwd: setconfig.path\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn item;\r\n\t\t\t});\r\n\t\t\t\r\n\r\n\t\t\tconsole.log(vm.childProcessList);\r\n\t\t}\r\n\t\tinit();\r\n\r\n\t}\r\n\r\n}());"
  ]
}